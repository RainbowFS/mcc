#!/usr/bin/env python3

import logging

LOG_FILENAME = 'mcc.log'
logging.basicConfig(
    filename=LOG_FILENAME,
    level=logging.DEBUG,
)

from mcr.libmcr import MCCClient
import dateutil
from mcr.libsettings import *
import argparse


class ParseSettings(argparse.Action):

    def __init__(self, option_strings, dest, nargs=None, **kwargs):
        super(ParseSettings, self).__init__(option_strings, dest, **kwargs)

    def __call__(self, parser, namespace, value, option_string=None):
        k, v = value.split('=')
        namespace.settings[k] = v


def valid_oar_date(adate):
    return dateutil.parser.parse(adate)


parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers(dest="command")
parser.add_argument("-q", help="quiet mode, just display the uids", action="store_true", dest="quiet")
parser.add_argument("--format", help="output formatting template, jinja", default=None)
parser.add_argument("--dry-run", help="just print the http requests", action="store_true", dest="dry")
parser.add_argument("--config",
                    help="path of the config file, by default mcc will look at a self.settings.yaml file in the current folder",
                    default=None)
parser.add_argument("-s", action=ParseSettings, help="override config file self.settings", nargs="*", default={},
                    dest="settings")

env_parser = subparsers.add_parser("env")
action_env_parser = env_parser.add_subparsers(dest="action")
list_action_env_parser = action_env_parser.add_parser("list")
list_action_env_parser.add_argument("uid", type=str, nargs='?', help='uid of the site to inspect', default=None)

site_parser = subparsers.add_parser("site")
action_site_parser = site_parser.add_subparsers(dest="action")
list_action_site_parser = action_site_parser.add_parser("list")
list_action_site_parser.add_argument("uid", type=str, nargs='?', help='uid of the site to inspect', default=None)

wait_parser = subparsers.add_parser("wait")
action_wait_parser = wait_parser.add_subparsers(dest="action")
kill_wait_parser = action_wait_parser.add_parser("kill")
kill_wait_parser.add_argument("uid", type=str, nargs='+', help='uid of the job to delete when killed')
kill_wait_parser.add_argument("--site", type=str, nargs='?', help='hint of where the site job is',
                              default=None)

alias_parser = subparsers.add_parser("alias")

action_alias_parser = alias_parser.add_subparsers(dest="action")
list_alias_parser = action_alias_parser.add_parser("list")
list_alias_parser.add_argument("uid", type=str, nargs='+', help='uids of the job sfor which to generate the aliases',
                               default=None)
list_alias_parser.add_argument("--site", type=str, nargs='?', help='hint of where the site job is',
                               default=None)

job_parser = subparsers.add_parser("job")

action_job_parser = job_parser.add_subparsers(dest="action")

list_job_parser = action_job_parser.add_parser("list")
list_job_parser.add_argument("uid", type=str, nargs='?', help='uid of the job to inspect', default=None)
list_job_parser.add_argument("--sites", type=str, nargs='*', help='list of sites for job search',
                             default=None)
list_job_parser.add_argument("--filter", type=str, nargs='*', help='list of filters to job seach, e.g. status=running',
                             default=[])

hosts_list_job_parser = action_job_parser.add_parser("hosts-list")
hosts_list_job_parser.add_argument("uid", type=int, nargs='?', help='uid of the job for which to show the hosts',
                                   default=None)
hosts_list_job_parser.add_argument("--site", type=str, nargs='?', help='hint of where the site job is',
                                   default=None)

add_job_parser = action_job_parser.add_parser("add")
add_job_parser.add_argument("site", type=str, help='site or cluster where to deploy the job')
add_job_parser.add_argument("node_count", type=int, help='how many node to book')
add_job_parser.add_argument("duration_adv", type=str, help='how many node to book', choices=["until", 'for'],
                            default="for")
add_job_parser.add_argument("duration", type=str, help='duration or expiration date for the job', default="1h")

plan_add_job_parserver = add_job_parser.add_subparsers(dest="effect_date")
future_plan_add_job_parserver = plan_add_job_parserver.add_parser("on")
future_plan_add_job_parserver.add_argument("date", help="date format is 'YYYY-MM-DD HH:MM:SS'", type=valid_oar_date)

now_plan_add_job_parserver = plan_add_job_parserver.add_parser("now")

wait_job_parser = action_job_parser.add_parser("wait")
wait_job_parser.add_argument("uid", type=str, help='uid of the job')
wait_job_parser.add_argument("--filter", type=str, help='wait until the condition is true e.g. state=running',
                             default="state=running")
wait_job_parser.add_argument("--site", type=str, nargs='?', help='hint of where the site job is',
                             default=None)

del_job_parser = action_job_parser.add_parser("del")
del_job_parser.add_argument("uid", type=str, nargs='*', help='list of uid(s) of the job(s) to delete')
del_job_parser.add_argument("--site", type=str, nargs='?', help='hint of where the site job is',
                            default=None)

install_job_parser = action_job_parser.add_parser("install")
install_job_parser.add_argument("uid", type=str, help='uid of the job to install to')
install_job_parser.add_argument("--site", type=str, nargs='?', help='hint of where the site job is',
                                default=None)

app_install_job_parser = install_job_parser.add_subparsers(dest="application")
salt_app_install_job_parser = app_install_job_parser.add_parser("salt")

dep_parser = subparsers.add_parser("dep")
action_dep_parser = dep_parser.add_subparsers(dest="action")

add_dep_parser = action_dep_parser.add_parser("add")
add_dep_parser.add_argument("uid", type=str, help='uid of the job on which to do the deployment')
add_dep_parser.add_argument("nodes", type=str, nargs='*',
                            help='names of the nodes on which to perform the deployement. all nodes from the job are deployed if ommited',
                            default=None)
add_dep_parser.add_argument("--site", type=str, nargs='?', help='hint of where the site job is',
                            default=None)
add_dep_parser.add_argument("--environment", type=str, help='name of the environment to install',
                            default="debian9-x64-base")

list_dep_parser = action_dep_parser.add_parser("list")
list_dep_parser.add_argument("uid", type=str, nargs='?', help='uid of the dep to inspect', default=None)
list_dep_parser.add_argument("--sites", type=str, nargs='*', help='list of sites for dep search')
list_dep_parser.add_argument("--filter", type=str, nargs='*',
                             help='list of filters to dep seach, e.g. state=running state!=error',
                             default=[])

list_dep_parser = action_dep_parser.add_parser("wait")
list_dep_parser.add_argument("uid", type=str, nargs='?', help='uid of the dep to inspect', default=None)
list_dep_parser.add_argument("--filter", type=str, nargs='*',
                             help='wait until the condition is true eg. status=terminate',
                             default="status=terminated")
list_dep_parser.add_argument("--site", type=str, nargs='?', help='hint of where the site job is',
                             default=None)

# Parse
opts = parser.parse_args()

settings = load_settings(opts.config, opts.settings)

# default values

# can't have both -s default_site=... and --sites ...
if "default_site" in opts.settings and opts.__contains__("sites") and opts.sites is not None:
    print("Can't override both default site and possible sites")
    exit(1)

if opts.__contains__("site") and opts.site is None:
    opts.site = settings["default_site"]
if opts.__contains__("sites") and opts.sites is None:
    opts.sites = [settings["default_site"]]

# create API session


try:

    MCCClient(**{**vars(opts), **settings}).run()
    exit(0)

except KeyboardInterrupt:
    pass
